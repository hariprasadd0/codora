generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    Int             @id @default(autoincrement())
  googleId              String?         @unique
  name                  String
  email                 String          @unique
  passwordHash          String?
  refreshToken          String?
  preference            Preference      @default(MORNING)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  teams                 TeamMember[]
  tasks                 Task[]          @relation("AssignedTasks")
  calendar              CalendarEvent[]
  googleCalendarEnabled Boolean         @default(false)
  googleCalendarId      String?
  googleAccessToken     String?
  googleRefreshToken    String?

  createdTeams    Team[]       @relation("TeamCreator")
  createdProjects Project[]    @relation("ProjectCreator")
  payments        Payment[]    @relation("PaidByUser")
  Comment         Comment[]
  Attachment      Attachment[]
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  createdBy   User?        @relation("TeamCreator", fields: [createdById], references: [id], onDelete: SetNull)
  createdById Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     TeamMember[]
  projects    Project[]
  payments    Payment[]
  invitations Invitation[]
}

model TeamMember {
  id       Int      @id @default(autoincrement())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   Int
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  role     Role     @default(MEMBER)
  joinedAt DateTime @default(now())

  @@unique([teamId, userId])
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  team        Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      Int?
  createdBy   User?     @relation("ProjectCreator", fields: [createdById], references: [id], onDelete: SetNull)
  createdById Int?
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tasks       Task[]
}

model Task {
  id               Int             @id @default(autoincrement())
  name             String
  description      String?
  status           Status          @default(PENDING)
  assignedTo       User?           @relation("AssignedTasks", fields: [assignedToId], references: [id], onDelete: SetNull)
  assignedToId     Int?
  project          Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId        Int
  priority         Priority        @default(MEDIUM)
  dependentTasks   Task[]          @relation("Dependency")
  dependency       Task?           @relation("Dependency", fields: [dependencyTaskId], references: [id], onDelete: SetNull)
  dependencyTaskId Int?
  deadline         DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  calendar         CalendarEvent[]
  Comment          Comment[]
  Attachment       Attachment[]
}

model Payment {
  id          Int      @id @default(autoincrement())
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      Int
  amount      Float
  paidBy      User?    @relation("PaidByUser", fields: [paidById], references: [id], onDelete: SetNull)
  paidById    Int?
  paymentDate DateTime @default(now())
  description String?
}

model CalendarEvent {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  task      Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    Int?
  eventDate DateTime
  eventType EventType @default(WORK_SESSION)
  createdAt DateTime  @default(now())

  @@unique([userId, taskId, eventDate])
}

model Invitation {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  expiresAt DateTime
  teamId    Int
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId    Int?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id        Int      @id @default(autoincrement())
  fileName  String
  fileUrl   String
  fileType  String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId    Int?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Preference {
  MORNING
  AFTERNOON
  NIGHT
}

enum Role {
  MEMBER
  TEAM_LEAD
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum EventType {
  WORK_SESSION
  REMINDER
  DEADLINE
}
